1. Keywords (Reserved Words)

abstract
assert
boolean
break
byte
case
catch
char
class
const
continue
default
do
double
else
enum
exports
extends
final
finally
float
for
if
implements
import
instanceof
int
interface
long
module
native
new
opens
package
private
protected
provides
public
requires
return
short
static
strictfp
super
switch
synchronized
this
throw
throws
transient
transitive
try
uses
var
void
volatile
while
with
when
yield
record
sealed
non-sealed
permits
_    (underscore, reserved keyword)

2. Identifiers
Names given to classes, variables, methods, and interfaces.
Examples:
myVariable
totalSum
Student
getData
_underscoreName
MAX_VALUE

3. Literals
Integer Literals:  10, 0b1010, 0xFF, 075
Floating Literals: 3.14, 6.022e23
Character Literals: 'A', '\\n', '\\t'
String Literals:  "Hello", "Java", "Alisha"
Boolean Literals: true, false
Null Literal:     null

4. Operators
Arithmetic Operators: +  -  *  /  %
Relational Operators: ==  !=  >  <  >=  <=
Logical Operators:    &&  ||  !
Assignment Operators: =  +=  -=  *=  /=  %=
Increment/Decrement:  ++  --
Bitwise Operators:    &  |  ^  ~  <<  >>  >>>
Ternary Operator:     ? :
Instanceof Operator:  instanceof
New Operator:         new

5. Separators (Punctuators)
( )   - parentheses (for methods and expressions)
{ }   - braces (for code blocks)
[ ]   - brackets (for arrays)
;     - semicolon (statement terminator)
,     - comma (separates variables)
.     - period (member access)
:     - colon (used in switch, labels, enhanced for)
@     - annotation marker
::    - method reference operator


Summary of Java Tokens
1. Keywords
2. Identifiers
3. Literals
4. Operators
5. Separators

